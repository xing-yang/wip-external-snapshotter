/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_AWSElasticBlockStoreVolumeSnapshotSource = map[string]string{
	"":           "AWSElasticBlockStoreVolumeSnapshotSource is AWS EBS volume snapshot source",
	"snapshotId": "Unique id of the persistent disk snapshot resource. Used to identify the disk snapshot in AWS",
}

func (AWSElasticBlockStoreVolumeSnapshotSource) SwaggerDoc() map[string]string {
	return map_AWSElasticBlockStoreVolumeSnapshotSource
}

var map_CSIVolumeSnapshotSource = map[string]string{
	"":               "CSIVolumeSnapshotSource is CSI volume snapshot source",
	"driver":         "Driver is the name of the driver to use for this snapshot. Required.",
	"snapshotHandle": "SnapshotHandle is the unique snapshot id returned by the CSI volume pluginâ€™s CreateSnapshot to refer to the snapshot on all subsequent calls. Required.",
	"createdAt":      "CreatedAt is timestamp when the point-in-time snapshot is taken on the storage system. The format of this field should be a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the  current time in nanoseconds since 1970-01-01 00:00:00 UTC. This field is REQUIRED.",
}

func (CSIVolumeSnapshotSource) SwaggerDoc() map[string]string {
	return map_CSIVolumeSnapshotSource
}

var map_CinderVolumeSnapshotSource = map[string]string{
	"":           "CinderVolumeSnapshotSource is Cinder volume snapshot source",
	"snapshotId": "Unique id of the cinder volume snapshot resource. Used to identify the snapshot in OpenStack",
}

func (CinderVolumeSnapshotSource) SwaggerDoc() map[string]string {
	return map_CinderVolumeSnapshotSource
}

var map_GCEPersistentDiskSnapshotSource = map[string]string{
	"":           "GCEPersistentDiskSnapshotSource is GCE PD volume snapshot source",
	"snapshotId": "Unique id of the persistent disk snapshot resource. Used to identify the disk snapshot in GCE",
}

func (GCEPersistentDiskSnapshotSource) SwaggerDoc() map[string]string {
	return map_GCEPersistentDiskSnapshotSource
}

var map_GlusterVolumeSnapshotSource = map[string]string{
	"":           "GlusterVolumeSnapshotSource is Gluster volume snapshot source",
	"snapshotId": "UniqueID represents a snapshot resource.",
}

func (GlusterVolumeSnapshotSource) SwaggerDoc() map[string]string {
	return map_GlusterVolumeSnapshotSource
}

var map_HostPathVolumeSnapshotSource = map[string]string{
	"":         "HostPathVolumeSnapshotSource is HostPath volume snapshot source",
	"snapshot": "Path represents a tar file that stores the HostPath volume source",
}

func (HostPathVolumeSnapshotSource) SwaggerDoc() map[string]string {
	return map_HostPathVolumeSnapshotSource
}

var map_VolumeAttachment = map[string]string{
	"":         "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
	"metadata": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
	"spec":     "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
	"status":   "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
}

func (VolumeAttachment) SwaggerDoc() map[string]string {
	return map_VolumeAttachment
}

var map_VolumeAttachmentList = map[string]string{
	"":         "VolumeAttachmentList is a collection of VolumeAttachment objects.",
	"metadata": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
	"items":    "Items is the list of VolumeAttachments",
}

func (VolumeAttachmentList) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentList
}

var map_VolumeAttachmentSource = map[string]string{
	"": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
	"persistentVolumeName": "Name of the persistent volume to attach.",
}

func (VolumeAttachmentSource) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentSource
}

var map_VolumeAttachmentSpec = map[string]string{
	"":         "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
	"attacher": "Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
	"source":   "Source represents the volume that should be attached.",
	"nodeName": "The node that the volume should be attached to.",
}

func (VolumeAttachmentSpec) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentSpec
}

var map_VolumeAttachmentStatus = map[string]string{
	"":                   "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
	"attached":           "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
	"attachmentMetadata": "Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
	"attachError":        "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
	"detachError":        "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
}

func (VolumeAttachmentStatus) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentStatus
}

var map_VolumeError = map[string]string{
	"":        "VolumeError captures an error encountered during a volume operation.",
	"time":    "Time the error was encountered.",
	"message": "String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.",
}

func (VolumeError) SwaggerDoc() map[string]string {
	return map_VolumeError
}

var map_VolumeSnapshot = map[string]string{
	"":         "VolumeSnapshot is the volume snapshot object accessible to the user. Upon succesful creation of the actual snapshot by the volume provider it is bound to the corresponding VolumeSnapshotData through the VolumeSnapshotSpec",
	"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
	"spec":     "Spec represents the desired state of the snapshot",
	"status":   "Status represents the latest observer state of the snapshot",
}

func (VolumeSnapshot) SwaggerDoc() map[string]string {
	return map_VolumeSnapshot
}

var map_VolumeSnapshotCondition = map[string]string{
	"":                   "VolumeSnapshotCondition describes the state of a volume snapshot  at a certain point.",
	"type":               "Type of VolumeSnapshot condition.",
	"status":             "Status of the condition, one of True, False, Unknown.",
	"lastTransitionTime": "The last time the condition transitioned from one status to another.",
	"reason":             "The reason for the condition's last transition.",
	"message":            "A human readable message indicating details about the transition.",
}

func (VolumeSnapshotCondition) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotCondition
}

var map_VolumeSnapshotData = map[string]string{
	"":         "VolumeSnapshotData represents the actual \"on-disk\" snapshot object",
	"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
	"spec":     "Spec represents the desired state of the snapshot",
	"status":   "Status represents the latest observed state of the snapshot",
}

func (VolumeSnapshotData) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotData
}

var map_VolumeSnapshotDataCondition = map[string]string{
	"":                   "VolumeSnapshotDataCondition describes the state of a volume snapshot  at a certain point.",
	"type":               "Type of volume snapshot condition.",
	"status":             "Status of the condition, one of True, False, Unknown.",
	"lastTransitionTime": "The last time the condition transitioned from one status to another.",
	"reason":             "The reason for the condition's last transition.",
	"message":            "A human readable message indicating details about the transition.",
}

func (VolumeSnapshotDataCondition) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotDataCondition
}

var map_VolumeSnapshotDataList = map[string]string{
	"":         "VolumeSnapshotDataList is a list of VolumeSnapshotData objects",
	"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
}

func (VolumeSnapshotDataList) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotDataList
}

var map_VolumeSnapshotDataSource = map[string]string{
	"":                      "VolumeSnapshotDataSource represents the actual location and type of the snapshot. Only one of its members may be specified.",
	"hostPath":              "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
	"glusterSnapshotVolume": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore GlusterSnapshotSource represents a gluster snapshot resource",
	"gcePersistentDisk":     "GCEPersistentDiskSnapshotSource represents an GCE PD snapshot resource",
	"cinderVolume":          "CinderVolumeSnapshotSource represents Cinder snapshot resource",
	"csiSnapshot":           "CSISnapshot represents CSI snapshot resource",
}

func (VolumeSnapshotDataSource) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotDataSource
}

var map_VolumeSnapshotDataSpec = map[string]string{
	"":                    "VolumeSnapshotDataSpec is the spec of the volume snapshot data",
	"volumeSnapshotRef":   "VolumeSnapshotRef is part of bi-directional binding between VolumeSnapshot and VolumeSnapshotData",
	"persistentVolumeRef": "PersistentVolumeRef represents the PersistentVolume that the snapshot has been taken from",
}

func (VolumeSnapshotDataSpec) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotDataSpec
}

var map_VolumeSnapshotDataStatus = map[string]string{
	"":                  "VolumeSnapshotDataStatus is the actual state of the volume snapshot",
	"creationTimestamp": "The time the snapshot was successfully created",
	"conditions":        "Representes the lates available observations about the volume snapshot",
}

func (VolumeSnapshotDataStatus) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotDataStatus
}

var map_VolumeSnapshotList = map[string]string{
	"":         "VolumeSnapshotList is a list of VolumeSnapshot objects",
	"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
}

func (VolumeSnapshotList) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotList
}

var map_VolumeSnapshotSpec = map[string]string{
	"": "VolumeSnapshotSpec is the desired state of the volume snapshot",
	"persistentVolumeClaimName": "PersistentVolumeClaimName is the name of the PVC being snapshotted",
	"snapshotDataName":          "SnapshotDataName binds the VolumeSnapshot object with the VolumeSnapshotData",
}

func (VolumeSnapshotSpec) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotSpec
}

var map_VolumeSnapshotStatus = map[string]string{
	"":                  "VolumeSnapshotStatus is the status of the VolumeSnapshot",
	"creationTimestamp": "The time the snapshot was successfully created",
	"conditions":        "Represent the latest available observations about the volume snapshot",
}

func (VolumeSnapshotStatus) SwaggerDoc() map[string]string {
	return map_VolumeSnapshotStatus
}

// AUTO-GENERATED FUNCTIONS END HERE
